webpackJsonp([2],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	var platform_browser_dynamic_1 = __webpack_require__(123);
	var app_module_1 = __webpack_require__(620);
	if (['prod', 'production'].indexOf(("dev")) != -1) {
	    core_1.enableProdMode();
	}
	var platform = platform_browser_dynamic_1.platformBrowserDynamic();
	platform.bootstrapModule(app_module_1.AppModule);


/***/ },

/***/ 191:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	var article_service_1 = __webpack_require__(193);
	/**
	 * A simple component, which fetches articles list from HTTP API and displays them.
	 */
	var ArticleListComponent = (function () {
	    function ArticleListComponent(articleService) {
	        this.articleService = articleService;
	        this.isLoading = true;
	    }
	    ArticleListComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.articleService.getAll().subscribe(function (data) { return _this.articles = data; }, function (error) { return _this.error = error; }, function () { return _this.isLoading = false; });
	    };
	    ArticleListComponent.prototype.ngOnDestroy = function () { };
	    return ArticleListComponent;
	}());
	ArticleListComponent = __decorate([
	    core_1.Component({
	        selector: 'da-article-list',
	        template: __webpack_require__(351),
	        styles: [__webpack_require__(348)],
	        encapsulation: core_1.ViewEncapsulation.Emulated,
	        providers: [article_service_1.ArticleService]
	    }),
	    __metadata("design:paramtypes", [article_service_1.ArticleService])
	], ArticleListComponent);
	exports.ArticleListComponent = ArticleListComponent;


/***/ },

/***/ 192:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	var router_1 = __webpack_require__(88);
	var article_service_1 = __webpack_require__(193);
	/**
	 * A simple component, which fetches article from HTTP API and displays it.
	 */
	var ArticleComponent = (function () {
	    function ArticleComponent(route, articleService) {
	        this.route = route;
	        this.articleService = articleService;
	        this.isLoading = true;
	    }
	    /**
	     * TODO: Note about non-observable param
	     */
	    ArticleComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        var id = +this.route.snapshot.params['id'];
	        this.articleService.get(id).subscribe(function (data) { return _this.article = data; }, function (error) { return _this.error = error; }, function () { return _this.isLoading = false; });
	    };
	    ArticleComponent.prototype.ngOnDestroy = function () { };
	    return ArticleComponent;
	}());
	ArticleComponent = __decorate([
	    core_1.Component({
	        selector: 'da-article',
	        template: __webpack_require__(352),
	        styles: [__webpack_require__(349)],
	        encapsulation: core_1.ViewEncapsulation.Emulated,
	        providers: [article_service_1.ArticleService]
	    }),
	    __metadata("design:paramtypes", [router_1.ActivatedRoute,
	        article_service_1.ArticleService])
	], ArticleComponent);
	exports.ArticleComponent = ArticleComponent;


/***/ },

/***/ 193:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	var http_1 = __webpack_require__(87);
	__webpack_require__(157);
	var API_ENDPOINT = 'https://jsonplaceholder.typicode.com/posts';
	/**
	 * A simple service which fetches data from HTTP API.
	 *
	 * TODO: Move API endpoint to app config
	 */
	var ArticleService = (function () {
	    function ArticleService(http) {
	        this.http = http;
	    }
	    ArticleService.prototype.get = function (id) {
	        return this.http
	            .get(API_ENDPOINT + '/' + id)
	            .map(this.extractData);
	    };
	    ArticleService.prototype.getAll = function () {
	        return this.http
	            .get(API_ENDPOINT)
	            .map(this.extractData);
	    };
	    ArticleService.prototype.extractData = function (res) {
	        var body = res.json();
	        return body || {};
	    };
	    return ArticleService;
	}());
	ArticleService = __decorate([
	    core_1.Injectable(),
	    __metadata("design:paramtypes", [http_1.Http])
	], ArticleService);
	exports.ArticleService = ArticleService;


/***/ },

/***/ 347:
/***/ function(module, exports) {

	module.exports = ".wrapper {\n  box-sizing: border-box;\n  max-width: 1200px;\n  margin: 0 auto; }\n\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n  padding-right: 2rem;\n  padding-left: 2rem; }\n\n.row {\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 0;\n  -webkit-flex: 0 1 auto;\n  -moz-box-flex: 0;\n  -moz-flex: 0 1 auto;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  -webkit-box-direction: normal;\n  -webkit-box-orient: horizontal;\n  -webkit-flex-direction: row;\n  -moz-flex-direction: row;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-flex-wrap: wrap;\n  -moz-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -0.5rem;\n  margin-left: -0.5rem; }\n\n.row.reverse {\n  -webkit-box-direction: reverse;\n  -webkit-box-orient: horizontal;\n  -webkit-flex-direction: row-reverse;\n  -moz-flex-direction: row-reverse;\n  -ms-flex-direction: row-reverse;\n  flex-direction: row-reverse; }\n\n.col.reverse {\n  -webkit-box-direction: reverse;\n  -webkit-box-orient: vertical;\n  -webkit-flex-direction: column-reverse;\n  -moz-flex-direction: column-reverse;\n  -ms-flex-direction: column-reverse;\n  flex-direction: column-reverse; }\n\n[class*=\"col-xs\"] {\n  box-sizing: border-box;\n  -webkit-box-flex: 0;\n  -webkit-flex: 0 0 auto;\n  -moz-box-flex: 0;\n  -moz-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  padding-right: 0.5rem;\n  padding-left: 0.5rem; }\n\n.col-xs-1 {\n  -webkit-flex-basis: 8.3333333333%;\n  -moz-flex-basis: 8.3333333333%;\n  -ms-flex-preferred-size: 8.3333333333%;\n  flex-basis: 8.3333333333%;\n  max-width: 8.3333333333%; }\n\n.col-xs-2 {\n  -webkit-flex-basis: 16.6666666667%;\n  -moz-flex-basis: 16.6666666667%;\n  -ms-flex-preferred-size: 16.6666666667%;\n  flex-basis: 16.6666666667%;\n  max-width: 16.6666666667%; }\n\n.col-xs-3 {\n  -webkit-flex-basis: 25%;\n  -moz-flex-basis: 25%;\n  -ms-flex-preferred-size: 25%;\n  flex-basis: 25%;\n  max-width: 25%; }\n\n.col-xs-4 {\n  -webkit-flex-basis: 33.3333333333%;\n  -moz-flex-basis: 33.3333333333%;\n  -ms-flex-preferred-size: 33.3333333333%;\n  flex-basis: 33.3333333333%;\n  max-width: 33.3333333333%; }\n\n.col-xs-5 {\n  -webkit-flex-basis: 41.6666666667%;\n  -moz-flex-basis: 41.6666666667%;\n  -ms-flex-preferred-size: 41.6666666667%;\n  flex-basis: 41.6666666667%;\n  max-width: 41.6666666667%; }\n\n.col-xs-6 {\n  -webkit-flex-basis: 50%;\n  -moz-flex-basis: 50%;\n  -ms-flex-preferred-size: 50%;\n  flex-basis: 50%;\n  max-width: 50%; }\n\n.col-xs-7 {\n  -webkit-flex-basis: 58.3333333333%;\n  -moz-flex-basis: 58.3333333333%;\n  -ms-flex-preferred-size: 58.3333333333%;\n  flex-basis: 58.3333333333%;\n  max-width: 58.3333333333%; }\n\n.col-xs-8 {\n  -webkit-flex-basis: 66.6666666667%;\n  -moz-flex-basis: 66.6666666667%;\n  -ms-flex-preferred-size: 66.6666666667%;\n  flex-basis: 66.6666666667%;\n  max-width: 66.6666666667%; }\n\n.col-xs-9 {\n  -webkit-flex-basis: 75%;\n  -moz-flex-basis: 75%;\n  -ms-flex-preferred-size: 75%;\n  flex-basis: 75%;\n  max-width: 75%; }\n\n.col-xs-10 {\n  -webkit-flex-basis: 83.3333333333%;\n  -moz-flex-basis: 83.3333333333%;\n  -ms-flex-preferred-size: 83.3333333333%;\n  flex-basis: 83.3333333333%;\n  max-width: 83.3333333333%; }\n\n.col-xs-11 {\n  -webkit-flex-basis: 91.6666666667%;\n  -moz-flex-basis: 91.6666666667%;\n  -ms-flex-preferred-size: 91.6666666667%;\n  flex-basis: 91.6666666667%;\n  max-width: 91.6666666667%; }\n\n.col-xs-12 {\n  -webkit-flex-basis: 100%;\n  -moz-flex-basis: 100%;\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  max-width: 100%; }\n\n.col-xs-offset-1 {\n  margin-left: 8.3333333333%; }\n\n.col-xs-offset-2 {\n  margin-left: 16.6666666667%; }\n\n.col-xs-offset-3 {\n  margin-left: 25%; }\n\n.col-xs-offset-4 {\n  margin-left: 33.3333333333%; }\n\n.col-xs-offset-5 {\n  margin-left: 41.6666666667%; }\n\n.col-xs-offset-6 {\n  margin-left: 50%; }\n\n.col-xs-offset-7 {\n  margin-left: 58.3333333333%; }\n\n.col-xs-offset-8 {\n  margin-left: 66.6666666667%; }\n\n.col-xs-offset-9 {\n  margin-left: 75%; }\n\n.col-xs-offset-10 {\n  margin-left: 83.3333333333%; }\n\n.col-xs-offset-11 {\n  margin-left: 91.6666666667%; }\n\n.col-xs-offset-12 {\n  margin-left: 100%; }\n\n.col-xs {\n  -webkit-box-flex: 1;\n  -webkit-flex-grow: 1;\n  -moz-flex-grow: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -webkit-flex-basis: 0;\n  -moz-flex-basis: 0;\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  max-width: 100%; }\n\n.start-xs {\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  -webkit-justify-content: flex-start;\n  -moz-justify-content: flex-start;\n  justify-content: flex-start;\n  text-align: start; }\n\n.center-xs {\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  -moz-justify-content: center;\n  justify-content: center;\n  text-align: center; }\n\n.end-xs {\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  -webkit-justify-content: flex-end;\n  -moz-justify-content: flex-end;\n  justify-content: flex-end;\n  text-align: end; }\n\n.top-xs {\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  -webkit-align-items: flex-start;\n  -moz-align-items: flex-start;\n  align-items: flex-start; }\n\n.middle-xs {\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  -webkit-align-items: center;\n  -moz-align-items: center;\n  align-items: center; }\n\n.bottom-xs {\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  -webkit-align-items: flex-end;\n  -moz-align-items: flex-end;\n  align-items: flex-end; }\n\n.around-xs {\n  -ms-flex-pack: distribute;\n  -webkit-justify-content: space-around;\n  -moz-justify-content: space-around;\n  justify-content: space-around; }\n\n.between-xs {\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  -webkit-justify-content: space-between;\n  -moz-justify-content: space-between;\n  justify-content: space-between; }\n\n.first-xs {\n  order: -1; }\n\n.last-xs {\n  order: 1; }\n\n@media only screen and (min-width: 48em) {\n  .container {\n    width: 46rem; }\n  [class*=\"col-sm\"] {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -webkit-flex: 0 0 auto;\n    -moz-box-flex: 0;\n    -moz-flex: 0 0 auto;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: 0.5rem;\n    padding-left: 0.5rem; }\n  .col-sm-1 {\n    -webkit-flex-basis: 8.3333333333%;\n    -moz-flex-basis: 8.3333333333%;\n    -ms-flex-preferred-size: 8.3333333333%;\n    flex-basis: 8.3333333333%;\n    max-width: 8.3333333333%; }\n  .col-sm-2 {\n    -webkit-flex-basis: 16.6666666667%;\n    -moz-flex-basis: 16.6666666667%;\n    -ms-flex-preferred-size: 16.6666666667%;\n    flex-basis: 16.6666666667%;\n    max-width: 16.6666666667%; }\n  .col-sm-3 {\n    -webkit-flex-basis: 25%;\n    -moz-flex-basis: 25%;\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%; }\n  .col-sm-4 {\n    -webkit-flex-basis: 33.3333333333%;\n    -moz-flex-basis: 33.3333333333%;\n    -ms-flex-preferred-size: 33.3333333333%;\n    flex-basis: 33.3333333333%;\n    max-width: 33.3333333333%; }\n  .col-sm-5 {\n    -webkit-flex-basis: 41.6666666667%;\n    -moz-flex-basis: 41.6666666667%;\n    -ms-flex-preferred-size: 41.6666666667%;\n    flex-basis: 41.6666666667%;\n    max-width: 41.6666666667%; }\n  .col-sm-6 {\n    -webkit-flex-basis: 50%;\n    -moz-flex-basis: 50%;\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%; }\n  .col-sm-7 {\n    -webkit-flex-basis: 58.3333333333%;\n    -moz-flex-basis: 58.3333333333%;\n    -ms-flex-preferred-size: 58.3333333333%;\n    flex-basis: 58.3333333333%;\n    max-width: 58.3333333333%; }\n  .col-sm-8 {\n    -webkit-flex-basis: 66.6666666667%;\n    -moz-flex-basis: 66.6666666667%;\n    -ms-flex-preferred-size: 66.6666666667%;\n    flex-basis: 66.6666666667%;\n    max-width: 66.6666666667%; }\n  .col-sm-9 {\n    -webkit-flex-basis: 75%;\n    -moz-flex-basis: 75%;\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%; }\n  .col-sm-10 {\n    -webkit-flex-basis: 83.3333333333%;\n    -moz-flex-basis: 83.3333333333%;\n    -ms-flex-preferred-size: 83.3333333333%;\n    flex-basis: 83.3333333333%;\n    max-width: 83.3333333333%; }\n  .col-sm-11 {\n    -webkit-flex-basis: 91.6666666667%;\n    -moz-flex-basis: 91.6666666667%;\n    -ms-flex-preferred-size: 91.6666666667%;\n    flex-basis: 91.6666666667%;\n    max-width: 91.6666666667%; }\n  .col-sm-12 {\n    -webkit-flex-basis: 100%;\n    -moz-flex-basis: 100%;\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%; }\n  .col-sm-offset-1 {\n    margin-left: 8.3333333333%; }\n  .col-sm-offset-2 {\n    margin-left: 16.6666666667%; }\n  .col-sm-offset-3 {\n    margin-left: 25%; }\n  .col-sm-offset-4 {\n    margin-left: 33.3333333333%; }\n  .col-sm-offset-5 {\n    margin-left: 41.6666666667%; }\n  .col-sm-offset-6 {\n    margin-left: 50%; }\n  .col-sm-offset-7 {\n    margin-left: 58.3333333333%; }\n  .col-sm-offset-8 {\n    margin-left: 66.6666666667%; }\n  .col-sm-offset-9 {\n    margin-left: 75%; }\n  .col-sm-offset-10 {\n    margin-left: 83.3333333333%; }\n  .col-sm-offset-11 {\n    margin-left: 91.6666666667%; }\n  .col-sm-offset-12 {\n    margin-left: 100%; }\n  .col-sm {\n    -webkit-box-flex: 1;\n    -webkit-flex-grow: 1;\n    -moz-flex-grow: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -webkit-flex-basis: 0;\n    -moz-flex-basis: 0;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%; }\n  .start-sm {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    -webkit-justify-content: flex-start;\n    -moz-justify-content: flex-start;\n    justify-content: flex-start;\n    text-align: start; }\n  .center-sm {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    -moz-justify-content: center;\n    justify-content: center;\n    text-align: center; }\n  .end-sm {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    -webkit-justify-content: flex-end;\n    -moz-justify-content: flex-end;\n    justify-content: flex-end;\n    text-align: end; }\n  .top-sm {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    -webkit-align-items: flex-start;\n    -moz-align-items: flex-start;\n    align-items: flex-start; }\n  .middle-sm {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    -webkit-align-items: center;\n    -moz-align-items: center;\n    align-items: center; }\n  .bottom-sm {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    -webkit-align-items: flex-end;\n    -moz-align-items: flex-end;\n    align-items: flex-end; }\n  .around-sm {\n    -ms-flex-pack: distribute;\n    -webkit-justify-content: space-around;\n    -moz-justify-content: space-around;\n    justify-content: space-around; }\n  .between-sm {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    -webkit-justify-content: space-between;\n    -moz-justify-content: space-between;\n    justify-content: space-between; }\n  .first-sm {\n    order: -1; }\n  .last-sm {\n    order: 1; } }\n\n@media only screen and (min-width: 62em) {\n  .container {\n    width: 61rem; }\n  [class*=\"col-md\"] {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -webkit-flex: 0 0 auto;\n    -moz-box-flex: 0;\n    -moz-flex: 0 0 auto;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: 0.5rem;\n    padding-left: 0.5rem; }\n  .col-md-1 {\n    -webkit-flex-basis: 8.3333333333%;\n    -moz-flex-basis: 8.3333333333%;\n    -ms-flex-preferred-size: 8.3333333333%;\n    flex-basis: 8.3333333333%;\n    max-width: 8.3333333333%; }\n  .col-md-2 {\n    -webkit-flex-basis: 16.6666666667%;\n    -moz-flex-basis: 16.6666666667%;\n    -ms-flex-preferred-size: 16.6666666667%;\n    flex-basis: 16.6666666667%;\n    max-width: 16.6666666667%; }\n  .col-md-3 {\n    -webkit-flex-basis: 25%;\n    -moz-flex-basis: 25%;\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%; }\n  .col-md-4 {\n    -webkit-flex-basis: 33.3333333333%;\n    -moz-flex-basis: 33.3333333333%;\n    -ms-flex-preferred-size: 33.3333333333%;\n    flex-basis: 33.3333333333%;\n    max-width: 33.3333333333%; }\n  .col-md-5 {\n    -webkit-flex-basis: 41.6666666667%;\n    -moz-flex-basis: 41.6666666667%;\n    -ms-flex-preferred-size: 41.6666666667%;\n    flex-basis: 41.6666666667%;\n    max-width: 41.6666666667%; }\n  .col-md-6 {\n    -webkit-flex-basis: 50%;\n    -moz-flex-basis: 50%;\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%; }\n  .col-md-7 {\n    -webkit-flex-basis: 58.3333333333%;\n    -moz-flex-basis: 58.3333333333%;\n    -ms-flex-preferred-size: 58.3333333333%;\n    flex-basis: 58.3333333333%;\n    max-width: 58.3333333333%; }\n  .col-md-8 {\n    -webkit-flex-basis: 66.6666666667%;\n    -moz-flex-basis: 66.6666666667%;\n    -ms-flex-preferred-size: 66.6666666667%;\n    flex-basis: 66.6666666667%;\n    max-width: 66.6666666667%; }\n  .col-md-9 {\n    -webkit-flex-basis: 75%;\n    -moz-flex-basis: 75%;\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%; }\n  .col-md-10 {\n    -webkit-flex-basis: 83.3333333333%;\n    -moz-flex-basis: 83.3333333333%;\n    -ms-flex-preferred-size: 83.3333333333%;\n    flex-basis: 83.3333333333%;\n    max-width: 83.3333333333%; }\n  .col-md-11 {\n    -webkit-flex-basis: 91.6666666667%;\n    -moz-flex-basis: 91.6666666667%;\n    -ms-flex-preferred-size: 91.6666666667%;\n    flex-basis: 91.6666666667%;\n    max-width: 91.6666666667%; }\n  .col-md-12 {\n    -webkit-flex-basis: 100%;\n    -moz-flex-basis: 100%;\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%; }\n  .col-md-offset-1 {\n    margin-left: 8.3333333333%; }\n  .col-md-offset-2 {\n    margin-left: 16.6666666667%; }\n  .col-md-offset-3 {\n    margin-left: 25%; }\n  .col-md-offset-4 {\n    margin-left: 33.3333333333%; }\n  .col-md-offset-5 {\n    margin-left: 41.6666666667%; }\n  .col-md-offset-6 {\n    margin-left: 50%; }\n  .col-md-offset-7 {\n    margin-left: 58.3333333333%; }\n  .col-md-offset-8 {\n    margin-left: 66.6666666667%; }\n  .col-md-offset-9 {\n    margin-left: 75%; }\n  .col-md-offset-10 {\n    margin-left: 83.3333333333%; }\n  .col-md-offset-11 {\n    margin-left: 91.6666666667%; }\n  .col-md-offset-12 {\n    margin-left: 100%; }\n  .col-md {\n    -webkit-box-flex: 1;\n    -webkit-flex-grow: 1;\n    -moz-flex-grow: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -webkit-flex-basis: 0;\n    -moz-flex-basis: 0;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%; }\n  .start-md {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    -webkit-justify-content: flex-start;\n    -moz-justify-content: flex-start;\n    justify-content: flex-start;\n    text-align: start; }\n  .center-md {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    -moz-justify-content: center;\n    justify-content: center;\n    text-align: center; }\n  .end-md {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    -webkit-justify-content: flex-end;\n    -moz-justify-content: flex-end;\n    justify-content: flex-end;\n    text-align: end; }\n  .top-md {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    -webkit-align-items: flex-start;\n    -moz-align-items: flex-start;\n    align-items: flex-start; }\n  .middle-md {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    -webkit-align-items: center;\n    -moz-align-items: center;\n    align-items: center; }\n  .bottom-md {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    -webkit-align-items: flex-end;\n    -moz-align-items: flex-end;\n    align-items: flex-end; }\n  .around-md {\n    -ms-flex-pack: distribute;\n    -webkit-justify-content: space-around;\n    -moz-justify-content: space-around;\n    justify-content: space-around; }\n  .between-md {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    -webkit-justify-content: space-between;\n    -moz-justify-content: space-between;\n    justify-content: space-between; }\n  .first-md {\n    order: -1; }\n  .last-md {\n    order: 1; } }\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsZXhib3hncmlkLnNjc3MiLCJib3dlcl9jb21wb25lbnRzL3Nhc3MtZmxleC1taXhpbi9fZmxleGJveC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCQSxRQUFRLENBQUM7RUFDUCxVQUFVLEVBQUUsVUFBVztFQUN2QixTQUFTLEVBQUUsTUFBTztFQUNsQixNQUFNLEVBQUUsTUFBTyxHQUhQOztBQU1WLGdCQUFnQixDQUFDO0VBQ2YsWUFBWSxFQUFFLElBQUs7RUFDbkIsV0FBVyxFQUFFLElBQUs7RUFDbEIsYUFBYSxFQXRCQSxJQUFJO0VBdUJqQixZQUFZLEVBdkJDLElBQUksR0FtQkQ7O0FBT2xCLElBQUksQ0FBQztFQUNILFVBQVUsRUFBRSxVQUFXO0VDd0J4QixPQUFPLEVBQUUsV0FBWTtFQUNyQixPQUFPLEVBQUUsWUFBYTtFQUN0QixPQUFPLEVBQUUsU0FBVTtFQUNuQixPQUFPLEVBQUUsV0FBWTtFQUNyQixPQUFPLEVBQUUsSUFBSztFQXNNZCxnQkFBZ0IsRURoT0QsQ0FBQztFQ2lPaEIsWUFBWSxFRGpPRyxDQUFDLENBQUUsQ0FBQyxDQUFFLElBQUk7RUNrT3pCLGFBQWEsRURsT0UsQ0FBQztFQ21PaEIsU0FBUyxFRG5PTSxDQUFDLENBQUUsQ0FBQyxDQUFFLElBQUk7RUNvT3pCLFFBQVEsRURwT08sQ0FBQyxDQUFFLENBQUMsQ0FBRSxJQUFJO0VDcU96QixJQUFJLEVEck9XLENBQUMsQ0FBRSxDQUFDLENBQUUsSUFBSTtFQ21FeEIscUJBQXFCLEVBQUUsTUFBTztFQUM5QixrQkFBa0IsRUFBRSxVQUFXO0VBRWhDLHNCQUFzQixFRHJFRyxHQUFHO0VDc0U1QixtQkFBbUIsRUR0RU0sR0FBRztFQ3VFNUIsa0JBQWtCLEVEdkVPLEdBQUc7RUN3RTVCLGNBQWMsRUR4RVcsR0FBRztFQzRGNUIsaUJBQWlCLEVEM0ZHLElBQUk7RUM0RnhCLGNBQWMsRUQ1Rk0sSUFBSTtFQ2dHdkIsYUFBYSxFRGhHTSxJQUFJO0VDa0d4QixTQUFTLEVE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QUUsQ0FBRSxHQURUIiwiZmlsZSI6ImZsZXhib3hncmlkLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vXG4vLyAtLSBTdGFydCBlZGl0aW5nIC0tIC8vXG4vL1xuXG5AaW1wb3J0IFwic2Fzcy1mbGV4LW1peGluL2ZsZXhib3hcIjtcblxuLy8gU2V0IHRoZSBudW1iZXIgb2YgY29sdW1ucyB5b3Ugd2FudCB0byB1c2Ugb24geW91ciBsYXlvdXQuXG4kZ3JpZC1jb2x1bW5zOiAxMjtcbi8vIFNldCB0aGUgZ3V0dGVyIGJldHdlZW4gY29sdW1ucy5cbiRndXR0ZXItd2lkdGg6IDFyZW07XG4vLyBTZXQgYSBtYXJnaW4gZm9yIHRoZSBjb250YWluZXIgc2lkZXMuXG4kb3V0ZXItbWFyZ2luOiAycmVtO1xuLy8gQ3JlYXRlIG9yIHJlbW92ZSBicmVha3BvaW50cyBmb3IgeW91ciBwcm9qZWN0XG4vLyBTeW50YXg6XG4vLyBuYW1lIFNJWkVyZW0sXG4kYnJlYWtwb2ludHM6XG4gIHNtIDQ4ZW0gNDZyZW0sXG4gIG1kIDYyZW0gNjFyZW1cbiAgbGcgNzVlbSA3MXJlbTtcblxuLy9cbi8vIC0tIFN0b3AgZWRpdGluZyAtLSAvL1xuLy9cblxuLndyYXBwZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXgtd2lkdGg6IDEyMDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5jb250YWluZXItZmx1aWQge1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBwYWRkaW5nLXJpZ2h0OiAkb3V0ZXItbWFyZ2luO1xuICBwYWRkaW5nLWxlZnQ6ICRvdXRlci1tYXJnaW47XG59XG5cbi5yb3cge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBAaW5jbHVkZSBmbGV4Ym94KCk7XG4gIEBpbmNsdWRlIGZsZXgoMCwgMSwgYXV0byk7XG4gIEBpbmNsdWRlIGZsZXgtZGlyZWN0aW9uKHJvdyk7XG4gIEBpbmNsdWRlIGZsZXgtd3JhcCh3cmFwKTtcbiAgbWFyZ2luLXJpZ2h0OiAtMC41cmVtO1xuICBtYXJnaW4tbGVmdDogLTAuNXJlbTtcbn1cblxuLnJvdy5yZXZlcnNlIHtcbiAgQGluY2x1ZGUgZmxleC1kaXJlY3Rpb24ocm93LXJldmVyc2UpO1xufVxuXG4uY29sLnJldmVyc2Uge1xuICBAaW5jbHVkZSBmbGV4LWRpcmVjdGlvbihjb2x1bW4tcmV2ZXJzZSk7XG59XG5cbiRuYW1lOiB4cztcbltjbGFzcyo9XCJjb2wtI3skbmFtZX1cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBAaW5jbHVkZSBmbGV4KDAsIDAsIGF1dG8pO1xuICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XG4gIHBhZGRpbmctbGVmdDogMC41cmVtO1xufVxuQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkZ3JpZC1jb2x1bW5zIHtcbiAgLmNvbC0jeyRuYW1lfS0jeyRpfSB7XG4gICAgQGluY2x1ZGUgZmxleC1iYXNpcygxMDAlIC8gJGdyaWQtY29sdW1ucyAqICRpKTtcbiAgICBtYXgtd2lkdGg6IDEwMCUgLyAkZ3JpZC1jb2x1bW5zICogJGk7XG4gIH1cbn1cbkBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGdyaWQtY29sdW1ucyB7XG4gIC5jb2wtI3skbmFtZX0tb2Zmc2V0LSN7JGl9IHtcbiAgICBtYXJnaW4tbGVmdDogMTAwJSAvICRncmlkLWNvbHVtbnMgKiAkaVxuICB9XG59XG4uY29sLSN7JG5hbWV9IHtcbiAgQGluY2x1ZGUgZmxleC1ncm93KDEpO1xuICBAaW5jbHVkZSBmbGV4LWJhc2lzKDApO1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG4uc3RhcnQtI3skbmFtZX0ge1xuICBAaW5jbHVkZSBqdXN0aWZ5LWNvbnRlbnQoZmxleC1zdGFydCk7XG4gIHRleHQtYWxpZ246IHN0YXJ0O1xufVxuXG4uY2VudGVyLSN7JG5hbWV9IHtcbiAgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KGNlbnRlcik7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmVuZC0jeyRuYW1lfSB7XG4gIEBpbmNsdWRlIGp1c3RpZnktY29udGVudChmbGV4LWVuZCk7XG4gIHRleHQtYWxpZ246IGVuZDtcbn1cblxuLnRvcC0jeyRuYW1lfSB7XG4gIEBpbmNsdWRlIGFsaWduLWl0ZW1zKGZsZXgtc3RhcnQpO1xufVxuXG4ubWlkZGxlLSN7JG5hbWV9IHtcbiAgQGluY2x1ZGUgYWxpZ24taXRlbXMoY2VudGVyKTtcbn1cblxuLmJvdHRvbS0jeyRuYW1lfSB7XG4gIEBpbmNsdWRlIGFsaWduLWl0ZW1zKGZsZXgtZW5kKTtcbn1cblxuLmFyb3VuZC0jeyRuYW1lfSB7XG4gIEBpbmNsdWRlIGp1c3RpZnktY29udGVudChzcGFjZS1hcm91bmQpO1xufVxuXG4uYmV0d2Vlbi0jeyRuYW1lfSB7XG4gIEBpbmNsdWRlIGp1c3RpZnktY29udGVudChzcGFjZS1iZXR3ZWVuKTtcbn1cblxuLmZpcnN0LSN7JG5hbWV9IHtcbiAgb3JkZXI6IC0xO1xufVxuXG4ubGFzdC0jeyRuYW1lfSB7XG4gIG9yZGVyOiAxO1xufVxuXG5cbkBlYWNoICRicmVha3BvaW50IGluICRicmVha3BvaW50cyB7XG4gICRuYW1lOiBudGgoJGJyZWFrcG9pbnQsIDEpO1xuICAkc2l6ZTogbnRoKCRicmVha3BvaW50LCAyKTtcbiAgJGNvbnRhaW5lcjogbnRoKCRicmVha3BvaW50LCAzKTtcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkc2l6ZSkge1xuICAgIC5jb250YWluZXIge1xuICAgICAgd2lkdGg6ICRjb250YWluZXI7XG4gICAgfVxuXG4gICAgW2NsYXNzKj1cImNvbC0jeyRuYW1lfVwiXSB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgQGluY2x1ZGUgZmxleCgwLCAwLCBhdXRvKTtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcbiAgICAgIHBhZGRpbmctbGVmdDogMC41cmVtO1xuICAgIH1cbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRncmlkLWNvbHVtbnMge1xuICAgICAgLmNvbC0jeyRuYW1lfS0jeyRpfSB7XG4gICAgICAgIEBpbmNsdWRlIGZsZXgtYmFzaXMoMTAwJSAvICRncmlkLWNvbHVtbnMgKiAkaSk7XG4gICAgICAgIG1heC13aWR0aDogMTAwJSAvICRncmlkLWNvbHVtbnMgKiAkaTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkZ3JpZC1jb2x1bW5zIHtcbiAgICAgIC5jb2wtI3skbmFtZX0tb2Zmc2V0LSN7JGl9IHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDEwMCUgLyAkZ3JpZC1jb2x1bW5zICogJGlcbiAgICAgIH1cbiAgICB9XG4gICAgLmNvbC0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBmbGV4LWdyb3coMSk7XG4gICAgICBAaW5jbHVkZSBmbGV4LWJhc2lzKDApO1xuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIH1cbiAgICAuc3RhcnQtI3skbmFtZX0ge1xuICAgICAgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KGZsZXgtc3RhcnQpO1xuICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XG4gICAgfVxuXG4gICAgLmNlbnRlci0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBqdXN0aWZ5LWNvbnRlbnQoY2VudGVyKTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG5cbiAgICAuZW5kLSN7JG5hbWV9IHtcbiAgICAgIEBpbmNsdWRlIGp1c3RpZnktY29udGVudChmbGV4LWVuZCk7XG4gICAgICB0ZXh0LWFsaWduOiBlbmQ7XG4gICAgfVxuXG4gICAgLnRvcC0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBhbGlnbi1pdGVtcyhmbGV4LXN0YXJ0KTtcbiAgICB9XG5cbiAgICAubWlkZGxlLSN7JG5hbWV9IHtcbiAgICAgIEBpbmNsdWRlIGFsaWduLWl0ZW1zKGNlbnRlcik7XG4gICAgfVxuXG4gICAgLmJvdHRvbS0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBhbGlnbi1pdGVtcyhmbGV4LWVuZCk7XG4gICAgfVxuXG4gICAgLmFyb3VuZC0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBqdXN0aWZ5LWNvbnRlbnQoc3BhY2UtYXJvdW5kKTtcbiAgICB9XG5cbiAgICAuYmV0d2Vlbi0jeyRuYW1lfSB7XG4gICAgICBAaW5jbHVkZSBqdXN0aWZ5LWNvbnRlbnQoc3BhY2UtYmV0d2Vlbik7XG4gICAgfVxuXG4gICAgLmZpcnN0LSN7JG5hbWV9IHtcbiAgICAgIG9yZGVyOiAtMTtcbiAgICB9XG5cbiAgICAubGFzdC0jeyRuYW1lfSB7XG4gICAgICBvcmRlcjogMTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIEZsZXhib3ggTWl4aW5zXG4vLyBodHRwOi8vcGhpbGlwd2FsdG9uLmdpdGh1Yi5pby9zb2x2ZWQtYnktZmxleGJveC9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waGlsaXB3YWx0b24vc29sdmVkLWJ5LWZsZXhib3hcbi8vIFxuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEJyaWFuIEZyYW5jb1xuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuLy8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4vLyB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4vLyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbi8vIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4vLyBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG4vLyBUaGlzIGlzIGEgc2V0IG9mIG1peGlucyBmb3IgdGhvc2Ugd2hvIHdhbnQgdG8gbWVzcyBhcm91bmQgd2l0aCBmbGV4Ym94XG4vLyB1c2luZyB0aGUgbmF0aXZlIHN1cHBvcnQgb2YgY3VycmVudCBicm93c2Vycy4gRm9yIGZ1bGwgc3VwcG9ydCB0YWJsZVxuLy8gY2hlY2s6IGh0dHA6Ly9jYW5pdXNlLmNvbS9mbGV4Ym94XG4vL1xuLy8gQmFzaWNhbGx5IHRoaXMgd2lsbCB1c2U6XG4vL1xuLy8gKiBGYWxsYmFjaywgb2xkIHN5bnRheCAoSUUxMCwgbW9iaWxlIHdlYmtpdCBicm93c2VycyAtIG5vIHdyYXBwaW5nKVxuLy8gKiBGaW5hbCBzdGFuZGFyZHMgc3ludGF4IChGRiwgU2FmYXJpLCBDaHJvbWUsIElFMTEsIE9wZXJhKVxuLy9cbi8vIFRoaXMgd2FzIGluc3BpcmVkIGJ5OlxuLy8gXG4vLyAqIGh0dHA6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvYWR2YW5jZWQtY3Jvc3MtYnJvd3Nlci1mbGV4Ym94L1xuLy8gXG4vLyBXaXRoIGhlbHAgZnJvbTpcbi8vIFxuLy8gKiBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC9cbi8vICogaHR0cDovL3RoZS1lY2hvcGxleC5uZXQvZmxleHlib3hlcy9cbi8vICogaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNzcyMDY5KHY9dnMuODUpLmFzcHhcbi8vICogaHR0cDovL2Nzcy10cmlja3MuY29tL3VzaW5nLWZsZXhib3gvXG4vLyAqIGh0dHA6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvYWR2YW5jZWQtY3Jvc3MtYnJvd3Nlci1mbGV4Ym94L1xuLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi11cy9kb2NzL3dlYi9ndWlkZS9jc3MvZmxleGlibGVfYm94ZXNcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggQ29udGFpbmVyc1xuLy9cbi8vIFRoZSAnZmxleCcgdmFsdWUgY2F1c2VzIGFuIGVsZW1lbnQgdG8gZ2VuZXJhdGUgYSBibG9jay1sZXZlbCBmbGV4XG4vLyBjb250YWluZXIgYm94LlxuLy9cbi8vIFRoZSAnaW5saW5lLWZsZXgnIHZhbHVlIGNhdXNlcyBhbiBlbGVtZW50IHRvIGdlbmVyYXRlIGEgaW5saW5lLWxldmVsXG4vLyBmbGV4IGNvbnRhaW5lciBib3guIFxuLy9cbi8vIGRpc3BsYXk6IGZsZXggfCBpbmxpbmUtZmxleFxuLy9cbi8vIGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNmbGV4LWNvbnRhaW5lcnNcbi8vXG4vLyAoUGxhY2Vob2xkZXIgc2VsZWN0b3JzIGZvciBlYWNoIHR5cGUsIGZvciB0aG9zZSB3aG8gcmF0aGVyIEBleHRlbmQpXG5cbkBtaXhpbiBmbGV4Ym94IHtcblx0ZGlzcGxheTogLXdlYmtpdC1ib3g7XG5cdGRpc3BsYXk6IC13ZWJraXQtZmxleDtcblx0ZGlzcGxheTogLW1vei1mbGV4O1xuXHRkaXNwbGF5OiAtbXMtZmxleGJveDtcblx0ZGlzcGxheTogZmxleDtcbn1cblxuJWZsZXhib3ggeyBAaW5jbHVkZSBmbGV4Ym94OyB9XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gaW5saW5lLWZsZXgge1xuXHRkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XG5cdGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWZsZXg7XG5cdGRpc3BsYXk6IC1tb3otaW5saW5lLWZsZXg7XG5cdGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveDtcblx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG5cbiVpbmxpbmUtZmxleCB7IEBpbmNsdWRlIGlubGluZS1mbGV4OyB9XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBGbGV4Ym94IERpcmVjdGlvblxuLy9cbi8vIFRoZSAnZmxleC1kaXJlY3Rpb24nIHByb3BlcnR5IHNwZWNpZmllcyBob3cgZmxleCBpdGVtcyBhcmUgcGxhY2VkIGluXG4vLyB0aGUgZmxleCBjb250YWluZXIsIGJ5IHNldHRpbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZmxleCBjb250YWluZXInc1xuLy8gbWFpbiBheGlzLiBUaGlzIGRldGVybWluZXMgdGhlIGRpcmVjdGlvbiB0aGF0IGZsZXggaXRlbXMgYXJlIGxhaWQgb3V0IGluLiBcbi8vXG4vLyBWYWx1ZXM6IHJvdyB8IHJvdy1yZXZlcnNlIHwgY29sdW1uIHwgY29sdW1uLXJldmVyc2Vcbi8vIERlZmF1bHQ6IHJvd1xuLy9cbi8vIGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNmbGV4LWRpcmVjdGlvbi1wcm9wZXJ0eVxuXG5AbWl4aW4gZmxleC1kaXJlY3Rpb24oJHZhbHVlOiByb3cpIHtcblx0QGlmICR2YWx1ZSA9PSByb3ctcmV2ZXJzZSB7XG5cdFx0LXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlO1xuXHRcdC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcblx0fSBAZWxzZSBpZiAkdmFsdWUgPT0gY29sdW1uIHtcblx0XHQtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcblx0XHQtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuXHR9IEBlbHNlIGlmICR2YWx1ZSA9PSBjb2x1bW4tcmV2ZXJzZSB7XG5cdFx0LXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlO1xuXHRcdC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG5cdH0gQGVsc2Uge1xuXHRcdC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xuXHRcdC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcblx0fVxuXHQtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiAkdmFsdWU7XG5cdC1tb3otZmxleC1kaXJlY3Rpb246ICR2YWx1ZTtcblx0LW1zLWZsZXgtZGlyZWN0aW9uOiAkdmFsdWU7XG5cdGZsZXgtZGlyZWN0aW9uOiAkdmFsdWU7XG59XG5cdC8vIFNob3J0ZXIgdmVyc2lvbjpcblx0QG1peGluIGZsZXgtZGlyKCRhcmdzLi4uKSB7IEBpbmNsdWRlIGZsZXgtZGlyZWN0aW9uKCRhcmdzLi4uKTsgfVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gRmxleGJveCBXcmFwXG4vL1xuLy8gVGhlICdmbGV4LXdyYXAnIHByb3BlcnR5IGNvbnRyb2xzIHdoZXRoZXIgdGhlIGZsZXggY29udGFpbmVyIGlzIHNpbmdsZS1saW5lXG4vLyBvciBtdWx0aS1saW5lLCBhbmQgdGhlIGRpcmVjdGlvbiBvZiB0aGUgY3Jvc3MtYXhpcywgd2hpY2ggZGV0ZXJtaW5lc1xuLy8gdGhlIGRpcmVjdGlvbiBuZXcgbGluZXMgYXJlIHN0YWNrZWQgaW4uIFxuLy9cbi8vIFZhbHVlczogbm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZVxuLy8gRGVmYXVsdDogbm93cmFwXG4vL1xuLy8gaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtd3JhcC1wcm9wZXJ0eVxuXG5AbWl4aW4gZmxleC13cmFwKCR2YWx1ZTogbm93cmFwKSB7XG5cdC8vIE5vIFdlYmtpdCBCb3ggZmFsbGJhY2suXG5cdC13ZWJraXQtZmxleC13cmFwOiAkdmFsdWU7XG5cdC1tb3otZmxleC13cmFwOiAkdmFsdWU7XG5cdEBpZiAkdmFsdWUgPT0gbm93cmFwIHtcblx0XHQtbXMtZmxleC13cmFwOiBub25lO1xuXHR9IEBlbHNlIHsgXG5cdFx0LW1zLWZsZXgtd3JhcDogJHZhbHVlOyBcblx0fVxuXHRmbGV4LXdyYXA6ICR2YWx1ZTtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggRmxvdyAoc2hvcnRoYW5kKVxuLy9cbi8vIFRoZSAnZmxleC1mbG93JyBwcm9wZXJ0eSBpcyBhIHNob3J0aGFuZCBmb3Igc2V0dGluZyB0aGUgJ2ZsZXgtZGlyZWN0aW9uJ1xuLy8gYW5kICdmbGV4LXdyYXAnIHByb3BlcnRpZXMsIHdoaWNoIHRvZ2V0aGVyIGRlZmluZSB0aGUgZmxleCBjb250YWluZXInc1xuLy8gbWFpbiBhbmQgY3Jvc3MgYXhlcy5cbi8vXG4vLyBWYWx1ZXM6IDxmbGV4LWRpcmVjdGlvbj4gfCA8ZmxleC13cmFwPiBcbi8vIERlZmF1bHQ6IHJvdyBub3dyYXBcbi8vXG4vLyBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8jZmxleC1mbG93LXByb3BlcnR5XG5cbkBtaXhpbiBmbGV4LWZsb3coJHZhbHVlczogKHJvdyBub3dyYXApKSB7XG5cdC8vIE5vIFdlYmtpdCBCb3ggZmFsbGJhY2suXG5cdC13ZWJraXQtZmxleC1mbG93OiAkdmFsdWVzO1xuXHQtbW96LWZsZXgtZmxvdzogJHZhbHVlcztcblx0LW1zLWZsZXgtZmxvdzogJHZhbHVlcztcblx0ZmxleC1mbG93OiAkdmFsdWVzO1xufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gRmxleGJveCBPcmRlclxuLy9cbi8vIFRoZSAnb3JkZXInIHByb3BlcnR5IGNvbnRyb2xzIHRoZSBvcmRlciBpbiB3aGljaCBmbGV4IGl0ZW1zIGFwcGVhciB3aXRoaW5cbi8vIHRoZWlyIGZsZXggY29udGFpbmVyLCBieSBhc3NpZ25pbmcgdGhlbSB0byBvcmRpbmFsIGdyb3Vwcy5cbi8vXG4vLyBEZWZhdWx0OiAwXG4vL1xuLy8gaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI29yZGVyLXByb3BlcnR5XG5cbkBtaXhpbiBvcmRlcigkaW50OiAwKSB7XG5cdC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6ICRpbnQgKyAxO1xuXHQtd2Via2l0LW9yZGVyOiAkaW50O1xuXHQtbW96LW9yZGVyOiAkaW50O1xuXHQtbXMtZmxleC1vcmRlcjogJGludDtcblx0b3JkZXI6ICRpbnQ7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBGbGV4Ym94IEdyb3dcbi8vXG4vLyBUaGUgJ2ZsZXgtZ3JvdycgcHJvcGVydHkgc2V0cyB0aGUgZmxleCBncm93IGZhY3Rvci4gTmVnYXRpdmUgbnVtYmVyc1xuLy8gYXJlIGludmFsaWQuXG4vL1xuLy8gRGVmYXVsdDogMFxuLy9cbi8vIGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNmbGV4LWdyb3ctcHJvcGVydHlcblxuQG1peGluIGZsZXgtZ3JvdygkaW50OiAwKSB7XG5cdC13ZWJraXQtYm94LWZsZXg6ICRpbnQ7XG5cdC13ZWJraXQtZmxleC1ncm93OiAkaW50O1xuXHQtbW96LWZsZXgtZ3JvdzogJGludDtcblx0LW1zLWZsZXgtcG9zaXRpdmU6ICRpbnQ7XG5cdGZsZXgtZ3JvdzogJGludDtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggU2hyaW5rXG4vL1xuLy8gVGhlICdmbGV4LXNocmluaycgcHJvcGVydHkgc2V0cyB0aGUgZmxleCBzaHJpbmsgZmFjdG9yLiBOZWdhdGl2ZSBudW1iZXJzXG4vLyBhcmUgaW52YWxpZC5cbi8vXG4vLyBEZWZhdWx0OiAxXG4vL1xuLy8gaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtc2hyaW5rLXByb3BlcnR5XG5cbkBtaXhpbiBmbGV4LXNocmluaygkaW50OiAxKSB7XG5cdC13ZWJraXQtZmxleC1zaHJpbms6ICRpbnQ7XG5cdC1tb3otZmxleC1zaHJpbms6ICRpbnQ7XG5cdC1tcy1mbGV4LW5lZ2F0aXZlOiAkaW50O1xuXHRmbGV4LXNocmluazogJGludDtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggQmFzaXNcbi8vXG4vLyBUaGUgJ2ZsZXgtYmFzaXMnIHByb3BlcnR5IHNldHMgdGhlIGZsZXggYmFzaXMuIE5lZ2F0aXZlIGxlbmd0aHMgYXJlIGludmFsaWQuIFxuLy9cbi8vIFZhbHVlczogTGlrZSBcIndpZHRoXCIgXG4vLyBEZWZhdWx0OiBhdXRvXG4vL1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1mbGV4Ym94LyNmbGV4LWJhc2lzLXByb3BlcnR5XG5cbkBtaXhpbiBmbGV4LWJhc2lzKCR2YWx1ZTogYXV0bykge1xuXHQtd2Via2l0LWZsZXgtYmFzaXM6ICR2YWx1ZTtcblx0LW1vei1mbGV4LWJhc2lzOiAkdmFsdWU7XG5cdC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAkdmFsdWU7XG5cdGZsZXgtYmFzaXM6ICR2YWx1ZTtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggXCJGbGV4XCIgKHNob3J0aGFuZClcbi8vXG4vLyBUaGUgJ2ZsZXgnIHByb3BlcnR5IHNwZWNpZmllcyB0aGUgY29tcG9uZW50cyBvZiBhIGZsZXhpYmxlIGxlbmd0aDogdGhlXG4vLyBmbGV4IGdyb3cgZmFjdG9yIGFuZCBmbGV4IHNocmluayBmYWN0b3IsIGFuZCB0aGUgZmxleCBiYXNpcy4gV2hlbiBhblxuLy8gZWxlbWVudCBpcyBhIGZsZXggaXRlbSwgJ2ZsZXgnIGlzIGNvbnN1bHRlZCBpbnN0ZWFkIG9mIHRoZSBtYWluIHNpemVcbi8vIHByb3BlcnR5IHRvIGRldGVybWluZSB0aGUgbWFpbiBzaXplIG9mIHRoZSBlbGVtZW50LiBJZiBhbiBlbGVtZW50IGlzXG4vLyBub3QgYSBmbGV4IGl0ZW0sICdmbGV4JyBoYXMgbm8gZWZmZWN0LlxuLy9cbi8vIFZhbHVlczogbm9uZSB8IDxmbGV4LWdyb3c+IDxmbGV4LXNocmluaz4gfHwgPGZsZXgtYmFzaXM+XG4vLyBEZWZhdWx0OiBTZWUgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzICgxIDEgMCkuXG4vL1xuLy8gaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2ZsZXgtcHJvcGVydHlcblxuQG1peGluIGZsZXgoJGZnOiAxLCAkZnM6IG51bGwsICRmYjogbnVsbCkge1xuICAgIFxuXHQvLyBTZXQgYSB2YXJpYWJsZSB0byBiZSB1c2VkIGJ5IGJveC1mbGV4IHByb3BlcnRpZXNcblx0JGZnLWJveGZsZXg6ICRmZztcblxuXHQvLyBCb3gtRmxleCBvbmx5IHN1cHBvcnRzIGEgZmxleC1ncm93IHZhbHVlIHNvIGxldCdzIGdyYWIgdGhlXG5cdC8vIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QgYW5kIGp1c3QgcmV0dXJuIHRoYXQuXG5cdEBpZiB0eXBlLW9mKCRmZykgPT0gJ2xpc3QnIHtcblx0XHQkZmctYm94ZmxleDogbnRoKCRmZywgMSk7XG5cdH1cblxuXHQtd2Via2l0LWJveC1mbGV4OiAkZmctYm94ZmxleDtcblx0LXdlYmtpdC1mbGV4OiAkZmcgJGZzICRmYjtcblx0LW1vei1ib3gtZmxleDogJGZnLWJveGZsZXg7XG5cdC1tb3otZmxleDogJGZnICRmcyAkZmI7XG5cdC1tcy1mbGV4OiAkZmcgJGZzICRmYjtcblx0ZmxleDogJGZnICRmcyAkZmI7XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBGbGV4Ym94IEp1c3RpZnkgQ29udGVudFxuLy9cbi8vIFRoZSAnanVzdGlmeS1jb250ZW50JyBwcm9wZXJ0eSBhbGlnbnMgZmxleCBpdGVtcyBhbG9uZyB0aGUgbWFpbiBheGlzXG4vLyBvZiB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBmbGV4IGNvbnRhaW5lci4gVGhpcyBpcyBkb25lIGFmdGVyIGFueSBmbGV4aWJsZVxuLy8gbGVuZ3RocyBhbmQgYW55IGF1dG8gbWFyZ2lucyBoYXZlIGJlZW4gcmVzb2x2ZWQuIFR5cGljYWxseSBpdCBoZWxwcyBkaXN0cmlidXRlXG4vLyBleHRyYSBmcmVlIHNwYWNlIGxlZnRvdmVyIHdoZW4gZWl0aGVyIGFsbCB0aGUgZmxleCBpdGVtcyBvbiBhIGxpbmUgYXJlXG4vLyBpbmZsZXhpYmxlLCBvciBhcmUgZmxleGlibGUgYnV0IGhhdmUgcmVhY2hlZCB0aGVpciBtYXhpbXVtIHNpemUuIEl0IGFsc29cbi8vIGV4ZXJ0cyBzb21lIGNvbnRyb2wgb3ZlciB0aGUgYWxpZ25tZW50IG9mIGl0ZW1zIHdoZW4gdGhleSBvdmVyZmxvdyB0aGUgbGluZS5cbi8vXG4vLyBOb3RlOiAnc3BhY2UtKicgdmFsdWVzIG5vdCBzdXBwb3J0ZWQgaW4gb2xkZXIgc3ludGF4ZXMuXG4vL1xuLy8gVmFsdWVzOiBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kXG4vLyBEZWZhdWx0OiBmbGV4LXN0YXJ0XG4vL1xuLy8gaHR0cDovL3czLm9yZy90ci9jc3MzLWZsZXhib3gvI2p1c3RpZnktY29udGVudC1wcm9wZXJ0eVxuXG5AbWl4aW4ganVzdGlmeS1jb250ZW50KCR2YWx1ZTogZmxleC1zdGFydCkge1xuXHRAaWYgJHZhbHVlID09IGZsZXgtc3RhcnQge1xuXHRcdC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0O1xuXHRcdC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuXHR9IEBlbHNlIGlmICR2YWx1ZSA9PSBmbGV4LWVuZCB7XG5cdFx0LXdlYmtpdC1ib3gtcGFjazogZW5kO1xuXHRcdC1tcy1mbGV4LXBhY2s6IGVuZDtcblx0fSBAZWxzZSBpZiAkdmFsdWUgPT0gc3BhY2UtYmV0d2VlbiB7XG5cdFx0LXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcblx0XHQtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xuXHR9IEBlbHNlIGlmICR2YWx1ZSA9PSBzcGFjZS1hcm91bmQge1xuXHRcdC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGU7XHRcdFxuXHR9IEBlbHNlIHtcblx0XHQtd2Via2l0LWJveC1wYWNrOiAkdmFsdWU7XG5cdFx0LW1zLWZsZXgtcGFjazogJHZhbHVlO1xuXHR9XG5cdC13ZWJraXQtanVzdGlmeS1jb250ZW50OiAkdmFsdWU7XG5cdC1tb3otanVzdGlmeS1jb250ZW50OiAkdmFsdWU7XG5cdGp1c3RpZnktY29udGVudDogJHZhbHVlO1xufVxuXHQvLyBTaG9ydGVyIHZlcnNpb246XG5cdEBtaXhpbiBmbGV4LWp1c3QoJGFyZ3MuLi4pIHsgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KCRhcmdzLi4uKTsgfVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gRmxleGJveCBBbGlnbiBJdGVtc1xuLy9cbi8vIEZsZXggaXRlbXMgY2FuIGJlIGFsaWduZWQgaW4gdGhlIGNyb3NzIGF4aXMgb2YgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGVcbi8vIGZsZXggY29udGFpbmVyLCBzaW1pbGFyIHRvICdqdXN0aWZ5LWNvbnRlbnQnIGJ1dCBpbiB0aGUgcGVycGVuZGljdWxhclxuLy8gZGlyZWN0aW9uLiAnYWxpZ24taXRlbXMnIHNldHMgdGhlIGRlZmF1bHQgYWxpZ25tZW50IGZvciBhbGwgb2YgdGhlIGZsZXhcbi8vIGNvbnRhaW5lcidzIGl0ZW1zLCBpbmNsdWRpbmcgYW5vbnltb3VzIGZsZXggaXRlbXMuICdhbGlnbi1zZWxmJyBhbGxvd3Ncbi8vIHRoaXMgZGVmYXVsdCBhbGlnbm1lbnQgdG8gYmUgb3ZlcnJpZGRlbiBmb3IgaW5kaXZpZHVhbCBmbGV4IGl0ZW1zLiAoRm9yXG4vLyBhbm9ueW1vdXMgZmxleCBpdGVtcywgJ2FsaWduLXNlbGYnIGFsd2F5cyBtYXRjaGVzIHRoZSB2YWx1ZSBvZiAnYWxpZ24taXRlbXMnXG4vLyBvbiB0aGVpciBhc3NvY2lhdGVkIGZsZXggY29udGFpbmVyLikgXG4vL1xuLy8gVmFsdWVzOiBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2hcbi8vIERlZmF1bHQ6IHN0cmV0Y2hcbi8vXG4vLyBodHRwOi8vdzMub3JnL3RyL2NzczMtZmxleGJveC8jYWxpZ24taXRlbXMtcHJvcGVydHlcblxuQG1peGluIGFsaWduLWl0ZW1zKCR2YWx1ZTogc3RyZXRjaCkge1xuXHRAaWYgJHZhbHVlID09IGZsZXgtc3RhcnQge1xuXHRcdC13ZWJraXQtYm94LWFsaWduOiBzdGFydDtcblx0XHQtbXMtZmxleC1hbGlnbjogc3RhcnQ7XG5cdH0gQGVsc2UgaWYgJHZhbHVlID09IGZsZXgtZW5kIHtcblx0XHQtd2Via2l0LWJveC1hbGlnbjogZW5kO1xuXHRcdC1tcy1mbGV4LWFsaWduOiBlbmQ7XG5cdH0gQGVsc2Uge1xuXHRcdC13ZWJraXQtYm94LWFsaWduOiAkdmFsdWU7XG5cdFx0LW1zLWZsZXgtYWxpZ246ICR2YWx1ZTtcblx0fVxuXHQtd2Via2l0LWFsaWduLWl0ZW1zOiAkdmFsdWU7XG5cdC1tb3otYWxpZ24taXRlbXM6ICR2YWx1ZTtcblx0YWxpZ24taXRlbXM6ICR2YWx1ZTtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEZsZXhib3ggQWxpZ24gU2VsZlxuLy9cbi8vIFZhbHVlczogYXV0byB8IGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaFxuLy8gRGVmYXVsdDogYXV0b1xuXG5AbWl4aW4gYWxpZ24tc2VsZigkdmFsdWU6IGF1dG8pIHtcblx0Ly8gTm8gV2Via2l0IEJveCBGYWxsYmFjay5cblx0LXdlYmtpdC1hbGlnbi1zZWxmOiAkdmFsdWU7XG5cdC1tb3otYWxpZ24tc2VsZjogJHZhbHVlO1xuXHRAaWYgJHZhbHVlID09IGZsZXgtc3RhcnQge1xuXHRcdC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0YXJ0O1xuXHR9IEBlbHNlIGlmICR2YWx1ZSA9PSBmbGV4LWVuZCB7XG5cdFx0LW1zLWZsZXgtaXRlbS1hbGlnbjogZW5kO1xuXHR9IEBlbHNlIHtcblx0XHQtbXMtZmxleC1pdGVtLWFsaWduOiAkdmFsdWU7XG5cdH1cblx0YWxpZ24tc2VsZjogJHZhbHVlO1xufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gRmxleGJveCBBbGlnbiBDb250ZW50XG4vL1xuLy8gVGhlICdhbGlnbi1jb250ZW50JyBwcm9wZXJ0eSBhbGlnbnMgYSBmbGV4IGNvbnRhaW5lcidzIGxpbmVzIHdpdGhpbiB0aGVcbi8vIGZsZXggY29udGFpbmVyIHdoZW4gdGhlcmUgaXMgZXh0cmEgc3BhY2UgaW4gdGhlIGNyb3NzLWF4aXMsIHNpbWlsYXIgdG9cbi8vIGhvdyAnanVzdGlmeS1jb250ZW50JyBhbGlnbnMgaW5kaXZpZHVhbCBpdGVtcyB3aXRoaW4gdGhlIG1haW4tYXhpcy4gTm90ZSxcbi8vIHRoaXMgcHJvcGVydHkgaGFzIG5vIGVmZmVjdCB3aGVuIHRoZSBmbGV4Ym94IGhhcyBvbmx5IGEgc2luZ2xlIGxpbmUuXG4vL1xuLy8gVmFsdWVzOiBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kIHwgc3RyZXRjaFxuLy8gRGVmYXVsdDogc3RyZXRjaFxuLy9cbi8vIGh0dHA6Ly93My5vcmcvdHIvY3NzMy1mbGV4Ym94LyNhbGlnbi1jb250ZW50LXByb3BlcnR5XG5cbkBtaXhpbiBhbGlnbi1jb250ZW50KCR2YWx1ZTogc3RyZXRjaCkge1xuXHQvLyBObyBXZWJraXQgQm94IEZhbGxiYWNrLlxuXHQtd2Via2l0LWFsaWduLWNvbnRlbnQ6ICR2YWx1ZTtcblx0LW1vei1hbGlnbi1jb250ZW50OiAkdmFsdWU7XG5cdEBpZiAkdmFsdWUgPT0gZmxleC1zdGFydCB7XG5cdFx0LW1zLWZsZXgtbGluZS1wYWNrOiBzdGFydDtcblx0fSBAZWxzZSBpZiAkdmFsdWUgPT0gZmxleC1lbmQge1xuXHRcdC1tcy1mbGV4LWxpbmUtcGFjazogZW5kO1xuXHR9IEBlbHNlIHtcblx0XHQtbXMtZmxleC1saW5lLXBhY2s6ICR2YWx1ZTtcblx0fVxuXHRhbGlnbi1jb250ZW50OiAkdmFsdWU7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */\n"

/***/ },

/***/ 348:
/***/ function(module, exports) {

	module.exports = ""

/***/ },

/***/ 349:
/***/ function(module, exports) {

	module.exports = ".article header h2 {\n  color: #333; }\n  .article header h2:hover {\n    color: #fa2800; }\n"

/***/ },

/***/ 350:
/***/ function(module, exports) {

	module.exports = "<div class=\"container container-fluid\">\n    <div class=\"row around-xs center-xs\">\n        <div class=\"col-xs\">\n            <h1 class=\"app__title\">Example Angular 2 application</h1>\n        </div>\n    </div>\n\n    <nav class=\"row around-xs center-xs\">\n        <div class=\"col-xs\">\n            <a [routerLink]=\"['/']\" routerLinkActive=\"active\">Articles</a>\n        </div>\n    </nav>\n\n    <hr />\n\n    <router-outlet></router-outlet>\n</div>\n"

/***/ },

/***/ 351:
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"isLoading\">\n    Loading&hellip;\n</div>\n\n<article *ngFor=\"let article of articles\" class=\"article-list-item\">\n    <h4><a [routerLink]=\"['/articles', article.id]\">{{ article.title }}</a></h4>\n</article>"

/***/ },

/***/ 352:
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"isLoading\">\n    Loading&hellip;\n</div>\n\n<div *ngIf=\"error\">\n    Something went wrong!\n</div>\n\n<article *ngIf=\"article\" class=\"article\">\n    <header>\n        <h2>{{ article?.title }}</h2>\n    </header>\n    <section>\n        {{ article?.body }}\n    </section>\n    <footer>\n        <!-- TODO: Get author over HTTP too? -->\n    </footer>\n</article>"

/***/ },

/***/ 619:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	/**
	 * Styles required here are common for all components (SASS/SCSS versions of normalize.css and flexboxgrid),
	 * so encapsulation is not used. Other components have their styles scoped with `ViewEncapsulation.Emulated`.
	 */
	var AppComponent = (function () {
	    function AppComponent() {
	    }
	    return AppComponent;
	}());
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'da-app',
	        template: __webpack_require__(350),
	        styles: [__webpack_require__(347)],
	        encapsulation: core_1.ViewEncapsulation.None,
	        providers: []
	    })
	], AppComponent);
	exports.AppComponent = AppComponent;


/***/ },

/***/ 620:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(19);
	var platform_browser_1 = __webpack_require__(58);
	var http_1 = __webpack_require__(87);
	var forms_1 = __webpack_require__(122);
	var app_routing_1 = __webpack_require__(621);
	var app_component_1 = __webpack_require__(619);
	var article_component_1 = __webpack_require__(192);
	var article_list_component_1 = __webpack_require__(191);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    return AppModule;
	}());
	AppModule = __decorate([
	    core_1.NgModule({
	        imports: [
	            platform_browser_1.BrowserModule,
	            forms_1.FormsModule,
	            http_1.HttpModule,
	            http_1.JsonpModule,
	            app_routing_1.routing
	        ],
	        declarations: [
	            app_component_1.AppComponent,
	            article_list_component_1.ArticleListComponent,
	            article_component_1.ArticleComponent
	        ],
	        providers: [app_routing_1.appRoutingProviders],
	        bootstrap: [app_component_1.AppComponent]
	    })
	], AppModule);
	exports.AppModule = AppModule;


/***/ },

/***/ 621:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var router_1 = __webpack_require__(88);
	var article_component_1 = __webpack_require__(192);
	var article_list_component_1 = __webpack_require__(191);
	var appRoutes = [
	    { path: 'articles/:id', component: article_component_1.ArticleComponent },
	    { path: '', component: article_list_component_1.ArticleListComponent },
	];
	exports.appRoutingProviders = [];
	exports.routing = router_1.RouterModule.forRoot(appRoutes);


/***/ }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,